1. [MTCNN](https://github.com/ipazc/mtcnn)
2. [EYE COLOR](https://www.edow.com/general-eye-care/eyecolor/)
3. [HTML COLOR PICKER](https://www.w3schools.com/colors/colors_picker.asp?colorhex=ffff00)
4. [HSV COLOR MODEL](https://www.lifewire.com/what-is-hsv-in-design-1078068)
5. [RGB TO HSV](https://www.rapidtables.com/convert/color/rgb-to-hsv.html)
6. [EYE COLOR RANGE](https://github.com/jeffreyolchovy/whatismyeyecolor/blob/master/library/src/main/scala/com/whatismyeyecolor/ColorRange.scala)

{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "9e6151de-09aa-4d79-8a7d-d053e3f81032",
   "metadata": {},
   "outputs": [],
   "source": [
    "# face color analysis given eye center position\n",
    "\n",
    "import sys\n",
    "import os\n",
    "import numpy as np\n",
    "import cv2\n",
    "import argparse\n",
    "import time\n",
    "from mtcnn.mtcnn import MTCNN\n",
    "\n",
    "detector = MTCNN()\n",
    "\n",
    "parser = argparse.ArgumentParser()\n",
    "parser.add_argument('--input_path', default='sample/2.jpg', help=\"it can be image or video or webcan id\")\n",
    "parser.add_argument('--input_type', default='image', help= \"either image or video (for video file and webcam id)\")\n",
    "opt = parser.parse_args()\n",
    "\n",
    "# define HSV color ranges for eyes colors\n",
    "class_name = (\"Blue\", \"Blue Gray\", \"Brown\", \"Brown Gray\", \"Brown Black\", \"Green\", \"Green Gray\", \"Other\")\n",
    "EyeColor = {\n",
    "    class_name[0] : ((166, 21, 50), (240, 100, 85)),\n",
    "    class_name[1] : ((166, 2, 25), (300, 20, 75)),\n",
    "    class_name[2] : ((2, 20, 20), (40, 100, 60)),\n",
    "    class_name[3] : ((20, 3, 30), (65, 60, 60)),\n",
    "    class_name[4] : ((0, 10, 5), (40, 40, 25)),\n",
    "    class_name[5] : ((60, 21, 50), (165, 100, 85)),\n",
    "    class_name[6] : ((60, 2, 25), (165, 20, 65))\n",
    "}\n",
    "\n",
    "def check_color(hsv, color):\n",
    "    if (hsv[0] >= color[0][0]) and (hsv[0] <= color[1][0]) and (hsv[1] >= color[0][1]) and \\\n",
    "    hsv[1] <= color[1][1] and (hsv[2] >= color[0][2]) and (hsv[2] <= color[1][2]):\n",
    "        return True\n",
    "    else:\n",
    "        return False\n",
    "\n",
    "# define eye color category rules in HSV space\n",
    "def find_class(hsv):\n",
    "    color_id = 7\n",
    "    for i in range(len(class_name)-1):\n",
    "        if check_color(hsv, EyeColor[class_name[i]]) == True:\n",
    "            color_id = i\n",
    "\n",
    "    return color_id\n",
    "\n",
    "def eye_color(image):\n",
    "    imgHSV = cv2.cvtColor(image, cv2.COLOR_BGR2HSV)\n",
    "    h, w = image.shape[0:2]\n",
    "    imgMask = np.zeros((image.shape[0], image.shape[1], 1))\n",
    "    \n",
    "    result = detector.detect_faces(image)\n",
    "    if result == []:\n",
    "        print('Warning: Can not detect any face in the input image!')\n",
    "        return\n",
    "\n",
    "    bounding_box = result[0]['box']\n",
    "    left_eye = result[0]['keypoints']['left_eye']\n",
    "    right_eye = result[0]['keypoints']['right_eye']\n",
    "\n",
    "    eye_distance = np.linalg.norm(np.array(left_eye)-np.array(right_eye))\n",
    "    eye_radius = eye_distance/15 # approximate\n",
    "   \n",
    "    cv2.circle(imgMask, left_eye, int(eye_radius), (255,255,255), -1)\n",
    "    cv2.circle(imgMask, right_eye, int(eye_radius), (255,255,255), -1)\n",
    "\n",
    "    cv2.rectangle(image,\n",
    "              (bounding_box[0], bounding_box[1]),\n",
    "              (bounding_box[0]+bounding_box[2], bounding_box[1] + bounding_box[3]),\n",
    "              (255,155,255),\n",
    "              2)\n",
    "\n",
    "    cv2.circle(image, left_eye, int(eye_radius), (0, 155, 255), 1)\n",
    "    cv2.circle(image, right_eye, int(eye_radius), (0, 155, 255), 1)\n",
    "\n",
    "    eye_class = np.zeros(len(class_name), np.float)\n",
    "\n",
    "    for y in range(0, h):\n",
    "        for x in range(0, w):\n",
    "            if imgMask[y, x] != 0:\n",
    "                eye_class[find_class(imgHSV[y,x])] +=1 \n",
    "\n",
    "    main_color_index = np.argmax(eye_class[:len(eye_class)-1])\n",
    "    total_vote = eye_class.sum()\n",
    "\n",
    "    print(\"\\n\\nDominant Eye Color: \", class_name[main_color_index])\n",
    "    print(\"\\n **Eyes Color Percentage **\")\n",
    "    for i in range(len(class_name)):\n",
    "        print(class_name[i], \": \", round(eye_class[i]/total_vote*100, 2), \"%\")\n",
    "    \n",
    "    label = 'Dominant Eye Color: %s' % class_name[main_color_index]  \n",
    "    cv2.putText(image, label, (left_eye[0]-10, left_eye[1]-40), cv2.FONT_HERSHEY_SIMPLEX, 0.5, (155,255,0))\n",
    "    cv2.imshow('EYE-COLOR-DETECTION', image)\n",
    "\n",
    "if __name__ == '__main__':\n",
    "\n",
    "    # image \n",
    "    if opt.input_type == 'image':   \n",
    "        image = cv2.imread(opt.input_path, cv2.IMREAD_COLOR)\n",
    "        # detect color percentage\n",
    "        eye_color(image)\n",
    "        cv2.imwrite('sample/result.jpg', image)    \n",
    "        cv2.waitKey(0)\n",
    "\n",
    "    # video or webcam\n",
    "    else: \n",
    "        cap = cv2.VideoCapture(opt.input_path)\n",
    "        while(True):\n",
    "            ret, frame = cap.read()\n",
    "            if ret == -1: \n",
    "                break\n",
    "\n",
    "            eye_color(frame)\n",
    "            if cv2.waitKey(1) & 0xFF == 27:\n",
    "                break"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.12"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}

# Eye-Color-detector
Simple Eye Color Detector using Machine Learning

## To simply run this model:
1. Clone this repository
2. Run the [Eye detector model](https://github.com/mridulshinghal123/Eye-Color-detector/blob/main/ed1.ipynb) file
3. Upload the image you want to detect
4. Click on detcet button
5. View results

## Installation 
#### Clone the project and install requirements
    $ git clone https://github.com/ghimiredhikura/Eye-Color-Detection
    $ cd Eye-Color-Detection
    $ sudo pip install -r requirements.txt

    [Note: if you have GPU change tensorflow to tensorflow-gpu in requirements.txt for fast processing]

#### Usage [Image]
    $ python eye-color.py --input_path=sample/2.jpg --input_type=image

**Output:**  

Diminant Eye Color:  Green  

|Color         | Percentage (%)|
|--------------|-----------|
|Blue |  0.0 |
|Blue Gray |  0.0 |
|Brown |  0.0 |
|Brown Gray |  0.0 |
|Brown Black |  0.0 |
|Green |  65.44 |
|Green Gray |  0.0 |
|Other |  34.56 |

<p align="left"><img src="sample/result.jpg" width="640"\></p>

#### Usage [Video/Webcam]
    $ python eye-color.py --input_path=sample/video.mp4 --input_type=video

**Output:**  

Dominant Eye Color:  Green

|Color         | Percentage (%)|
|--------------|-----------|
|Blue |  0.0 |
|Blue Gray |  0.0 |
|Brown |  0.0 |
|Brown Gray |  0.0 |
|Brown Black |  0.0 |
|Green |  18.58 |
|Green Gray |  0.79 |
|Other |  80.63 |

<p align="left"><img src="sample/result_video.jpg" width="640"\></p>

#### References
1. [MTCNN](https://github.com/ipazc/mtcnn)
2. [EYE COLOR](https://www.edow.com/general-eye-care/eyecolor/)
3. [HTML COLOR PICKER](https://www.w3schools.com/colors/colors_picker.asp?colorhex=ffff00)
4. [HSV COLOR MODEL](https://www.lifewire.com/what-is-hsv-in-design-1078068)
5. [RGB TO HSV](https://www.rapidtables.com/convert/color/rgb-to-hsv.html)
6. [EYE COLOR RANGE](https://github.com/jeffreyolchovy/whatismyeyecolor/blob/master/library/src/main/scala)


### Sample
1. [Sample output1](https://github.com/mridulshinghal123/Eye-Color-detector/blob/main/Sample1.png)
2. [Sample output 2](https://github.com/mridulshinghal123/Eye-Color-detector/blob/main/Sample%202.jpg)
#   N u l l C l a s s - A s s i g n m e n t - 1 
 
 
